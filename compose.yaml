
# version: '3'

# #Define services
# services:

#   #PostgreSQL Database for the application
#   postgres:
#     image: "postgres:latest"
#     container_name: postgres
#     #Volume mounted for database for the storage
#     volumes:
#       - scrum-data:/var/lib/postgresql/data
#     ports:
#       - 5432:5432 # Forward the exposed port 5432 on the container to port 5432 on the host machine

#     #Environment variable for DB name, user and password
#     environment:
#       - POSTGRES_DB=db_julius
#       - POSTGRES_USER=postgres
#       - POSTGRES_PASSWORD=root
#     networks:
#       - se_ofertas

#   #Back-end Spring Boot Application
#   api:
#     #The docker file in scrum-app build the jar and provides the docker image with the following name.
#     build: .
#     container_name: api-ofertas

#     #Environment variables for Spring Boot Application.
#     environment:
#       - DB_SERVER=postgres
#       - POSTGRES_DB=db_julius
#       - POSTGRES_USER=postgres
#       - POSTGRES_PASSWORD=root
#     ports:
#       - 8080:8080 # Forward the exposed port 8080 on the container to port 8080 on the host machine
#     links:
#       - postgres
#     networks:
#       - se_ofertas

#   # Fron-end Angular Application
#   spa:
#     build: ../../Julius da promo front end
#     container_name: spa-ofertas
#     ports:
#       - 4200:4200
#     links:
#       - api

# # Volumes for DB data
# volumes:
#   scrum-data:

# networks:
#   dev-network:
#     driver: se_ofertas


version: '3.8'
services:
  db:
    image: postgres:latest
    container_name: postgres-container
    environment:
      POSTGRES_DB: db_julius
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: root
    ports:
      - "5432:5432"
    networks:
      - my-network

  spring-app:
    image: my-spring-app
    container_name: spring-container
    depends_on:
      - db
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/db_julius
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: root
    ports:
      - "8080:8080"
    networks:
      - my-network

networks:
  my-network:
    driver: bridge
